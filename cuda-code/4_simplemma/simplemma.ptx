
Fatbin elf code:
================
arch = sm_80
code version = [1,7]
host = linux
compile_size = 64bit

Fatbin elf code:
================
arch = sm_80
code version = [1,7]
host = linux
compile_size = 64bit

Fatbin ptx code:
================
arch = sm_80
code version = [8,4]
host = linux
compile_size = 64bit
compressed
ptxasOptions = 

//
//
//
//
//
//

.version 8.4
.target sm_80
.address_size 64

//

.visible .entry _Z8wmma_kerP6__halfS0_S0_(
.param .u64 _Z8wmma_kerP6__halfS0_S0__param_0,
.param .u64 _Z8wmma_kerP6__halfS0_S0__param_1,
.param .u64 _Z8wmma_kerP6__halfS0_S0__param_2
)
{
.reg .b16 %rs<2>;
.reg .f32 %f<2>;
.reg .b32 %r<23>;
.reg .b64 %rd<7>;


ld.param.u64 %rd1, [_Z8wmma_kerP6__halfS0_S0__param_0];
ld.param.u64 %rd2, [_Z8wmma_kerP6__halfS0_S0__param_1];
ld.param.u64 %rd3, [_Z8wmma_kerP6__halfS0_S0__param_2];
mov.f32 %f1, 0f00000000;
cvta.to.global.u64 %rd4, %rd2;
//
{ cvt.rn.f16.f32 %rs1, %f1;}

//
mov.b32 %r1, {%rs1, %rs1};
cvta.to.global.u64 %rd5, %rd3;
cvta.to.global.u64 %rd6, %rd1;
mov.u32 %r2, 16;
wmma.load.a.sync.aligned.row.m8n32k16.global.f16 {%r3, %r4, %r5, %r6, %r7, %r8, %r9, %r10}, [%rd6], %r2;
wmma.load.b.sync.aligned.col.m8n32k16.global.f16 {%r11, %r12, %r13, %r14, %r15, %r16, %r17, %r18}, [%rd4], %r2;
wmma.mma.sync.aligned.row.col.m8n32k16.f16.f16 {%r19, %r20, %r21, %r22}, {%r3, %r4, %r5, %r6, %r7, %r8, %r9, %r10}, {%r11, %r12, %r13, %r14, %r15, %r16, %r17, %r18}, {%r1, %r1, %r1, %r1};
wmma.store.d.sync.aligned.row.m8n32k16.global.f16 [%rd5], {%r19, %r20, %r21, %r22}, %r2;
ret;

}


